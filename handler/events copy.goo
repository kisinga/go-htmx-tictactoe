package handler

import (
	"fmt"

	"github.com/gorilla/websocket"
	"github.com/kisinga/go-htmx-tictactoe/model"
	"github.com/labstack/echo/v4"
)

type EventsHandler struct {
	Games            *map[string]*model.Board
	BroadcastChannel model.BroadcastChannel
	Clients          map[string][]chan *model.Cell // Maps game IDs to client channels
	upgrader         websocket.Upgrader
}

func NewEventsHandler(games *map[string]*model.Board, bc model.BroadcastChannel, clients map[string][]chan *model.Cell, upgrader websocket.Upgrader) *EventsHandler {
	e := &EventsHandler{
		Games:            games,
		BroadcastChannel: bc,
		Clients:          clients,
		upgrader:         upgrader,
	}
	e.ListenToBroadcasts()
	return e
}

// ListenToBroadcasts starts listening to the broadcast channel and forwards events to relevant clients.
func (h *EventsHandler) ListenToBroadcasts() {
	go func() {
		for update := range h.BroadcastChannel {
			if clients, ok := h.Clients[update.GameID]; ok {
				for _, client := range clients {
					// Non-blocking send with select to avoid blocking if client is not listening
					select {
					case client <- update.UpdatedCell:
					default:
					}
				}
			}
		}
	}()
}

// HandleEvents sets up an SSE connection and listens for updates to send to the client.
func (h *EventsHandler) HandleEvents(c echo.Context) error {
	gameID := c.Param("gameID")

	// Create a channel to receive updates for this client
	clientChan := make(chan *model.Cell)
	h.Clients[gameID] = append(h.Clients[gameID], clientChan)
	ws, err := h.upgrader.Upgrade(c.Response(), c.Request(), nil)
	if err != nil {
		return err
	}
	// Remove client channel when done
	defer func() {
		// Logic to safely remove the clientChan from h.Clients[gameID]
		for i, ch := range h.Clients[gameID] {
			if ch == clientChan {
				h.Clients[gameID] = append(h.Clients[gameID][:i], h.Clients[gameID][i+1:]...)
				break
			}
		}
		close(clientChan) // Close the channel to prevent leaks
		ws.Close()
	}()

	// Send initial connection confirmation to the client
	for {
		cell, ok := <-clientChan
		if !ok { // Channel was closed
			return nil
		}
		if cell == nil {
			continue
		}
		res := fmt.Sprintf("event: %d-%d\n\ndata: <p>test<p>\n\n", cell.Row, cell.Col)
		err := ws.WriteMessage(websocket.TextMessage, []byte(res))
		if err != nil {
			c.Logger().Error(err)
		}
	}

}
